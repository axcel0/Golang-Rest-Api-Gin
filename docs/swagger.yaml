basePath: /api/v1
definitions:
  models.BatchCreateUsersRequest:
    properties:
      users:
        items:
          $ref: '#/definitions/models.CreateUserRequest'
        maxItems: 100
        minItems: 1
        type: array
    required:
    - users
    type: object
  models.CreateUserRequest:
    properties:
      age:
        example: 25
        maximum: 150
        minimum: 1
        type: integer
      email:
        example: john@example.com
        type: string
      name:
        example: John Doe
        maxLength: 100
        minLength: 2
        type: string
      password:
        example: password123
        maxLength: 100
        minLength: 6
        type: string
    required:
    - age
    - email
    - name
    - password
    type: object
  models.LoginRequest:
    properties:
      email:
        example: john@example.com
        type: string
      password:
        example: password123
        type: string
    required:
    - email
    - password
    type: object
  models.RefreshTokenRequest:
    properties:
      refresh_token:
        type: string
    required:
    - refresh_token
    type: object
  models.RegisterRequest:
    properties:
      age:
        example: 25
        maximum: 150
        minimum: 1
        type: integer
      email:
        example: john@example.com
        type: string
      name:
        example: John Doe
        maxLength: 100
        minLength: 2
        type: string
      password:
        example: password123
        maxLength: 100
        minLength: 6
        type: string
    required:
    - age
    - email
    - name
    - password
    type: object
  models.UpdateUserRequest:
    properties:
      age:
        example: 26
        maximum: 150
        minimum: 1
        type: integer
      email:
        example: jane@example.com
        type: string
      name:
        example: Jane Doe
        maxLength: 100
        minLength: 2
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: support@example.com
    name: API Support
  description: Production-ready REST API built with Go, Gin, GORM, and JWT authentication
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  termsOfService: http://swagger.io/terms/
  title: Go REST API with JWT Authentication
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate user with email and password
      parameters:
      - description: Login credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Login successful with tokens
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid request body
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Invalid credentials or inactive account
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      summary: User login
      tags:
      - authentication
  /auth/profile:
    get:
      consumes:
      - application/json
      description: Get the authenticated user's profile information
      produces:
      - application/json
      responses:
        "200":
          description: User profile
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "404":
          description: User not found
          schema:
            additionalProperties: true
            type: object
      security:
      - Bearer: []
      summary: Get user profile
      tags:
      - authentication
  /auth/refresh:
    post:
      consumes:
      - application/json
      description: Get a new access token using refresh token
      parameters:
      - description: Refresh token
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.RefreshTokenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Token refreshed successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid request body
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Invalid or expired refresh token
          schema:
            additionalProperties: true
            type: object
      summary: Refresh access token
      tags:
      - authentication
  /auth/register:
    post:
      consumes:
      - application/json
      description: Create a new user account with email and password
      parameters:
      - description: Register request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: User registered successfully with tokens
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid request body
          schema:
            additionalProperties: true
            type: object
        "409":
          description: Email already registered
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      summary: Register new user
      tags:
      - authentication
  /health:
    get:
      consumes:
      - application/json
      description: Check if the service is running
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Health check
      tags:
      - health
  /ready:
    get:
      consumes:
      - application/json
      description: Check if the service is ready to accept requests (includes database
        check)
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "503":
          description: Service Unavailable
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Readiness check
      tags:
      - health
  /users:
    get:
      consumes:
      - application/json
      description: Get all users with pagination, search, filter, and sort
      parameters:
      - description: 'Page number (default: 1)'
        in: query
        name: page
        type: integer
      - description: 'Items per page (default: 10)'
        in: query
        name: limit
        type: integer
      - description: 'Sort field (default: created_at)'
        in: query
        name: sort
        type: string
      - description: 'Sort order: asc or desc (default: desc)'
        in: query
        name: order
        type: string
      - description: Search in name and email
        in: query
        name: search
        type: string
      - description: Filter by active status
        in: query
        name: active
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: List of users with pagination metadata
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid query parameters
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      summary: List all users
      tags:
      - users
    post:
      consumes:
      - application/json
      description: Create a new user with the provided information
      parameters:
      - description: User creation request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.CreateUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: User created successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid request body
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      summary: Create new user
      tags:
      - users
  /users/{id}:
    delete:
      consumes:
      - application/json
      description: Soft delete a user by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: User deleted successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid user ID
          schema:
            additionalProperties: true
            type: object
        "404":
          description: User not found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      summary: Delete user
      tags:
      - users
    get:
      consumes:
      - application/json
      description: Get a single user by their ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: User found
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid user ID
          schema:
            additionalProperties: true
            type: object
        "404":
          description: User not found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      summary: Get user by ID
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Update an existing user by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: User update request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: User updated successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: User not found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      summary: Update user
      tags:
      - users
  /users/batch:
    post:
      consumes:
      - application/json
      description: Create multiple users in a single request
      parameters:
      - description: Batch user creation request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.BatchCreateUsersRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Users created successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid request body
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      summary: Batch create users
      tags:
      - users
  /users/stats:
    get:
      consumes:
      - application/json
      description: Get statistics about users (total count, active count, etc.)
      produces:
      - application/json
      responses:
        "200":
          description: User statistics
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      summary: Get user statistics
      tags:
      - users
securityDefinitions:
  Bearer:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
